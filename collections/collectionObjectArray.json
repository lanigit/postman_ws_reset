[{"collection":{"info":{"_postman_id":"7a0ca4f4-c513-4645-b663-f5f8e0acb744","name":"Workspace Reset Tool","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json","updatedAt":"2023-02-09T18:12:03.000Z"},"item":[{"name":"Initialize Workspace Data","item":[{"name":"Get Workspace & Set Values","event":[{"listen":"test","script":{"id":"684a7ffb-2a6d-4b0a-b57f-b00dad906ed2","exec":["const { workspace } = pm.response.json();","// console.log(workspace);","const { apis, collections, environments, mocks, monitors } = workspace;","// console.log(apis, collections, environments, mocks, monitors);","","// ++++++++++++++++++++++ //","// REFACTOR TO SEND PUTs WITH","// OBJECTS INSTEAD OF ARRAYS TO REPO","// console.log(Object.keys(apis));","// console.log(Object.values(apis));","// pm.collectionVariables.set('apiTestObject', JSON.stringify(apiObjectTesting));","","// newArrObj = {};","// let newObject = Object.assign(newArrObj, apis);","// // console.log(newObject);","// pm.collectionVariables.set('apiTestObject', JSON.stringify(newObject));","// ++++++++++++++++++++++ //","","// SET API ARRAY ","let apiArray = [];","apis.forEach(el => {","    apiArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('apiArray', JSON.stringify(apiArray));","// console.log(\"API UIDs: \" + pm.collectionVariables.get('apiArray'));","","// SET COLLECTIONS ARRAY","let collArray = [];","collections.forEach(el => {","    collArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('collectionArray', JSON.stringify(collArray));","// console.log(\"Collections UIDs: \" + pm.collectionVariables.get('collectionArray'));","","// SET ENVIRONMENTS ARRAY","let envArray = [];","environments.forEach(el => {","    envArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('environmentArray', JSON.stringify(envArray));","// console.log(\"Environment UIDs: \" + pm.collectionVariables.get('environmentArray'));","","// SET MOCK ARRAY","let mockArray = [];","mocks.forEach(el => {","    mockArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('mockArray', JSON.stringify(mockArray));","// console.log(\"Mock UIDs: \" + pm.collectionVariables.get('mockArray'));","","// SET MONITOR ARRAY","let monArray = [];","monitors.forEach(el => {","    monArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('monitorArray', JSON.stringify(monArray));","// console.log(\"Monitor UIDs: \" + pm.collectionVariables.get('monitorArray'));","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});",""],"type":"text/javascript"}}],"id":"bf7d2bb1-63fe-4319-aa80-f6a6a83d1d4e","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"apikey","apikey":[{"key":"value","value":"{{reset_key}}","type":"string"},{"key":"key","value":"x-api-key","type":"string"}]},"method":"GET","header":[{"key":"Access-Control-Allow-Origin","value":"https://api.getpostman.com","type":"text"}],"url":{"raw":"https://api.getpostman.com/workspaces/{{workspaceUid}}","protocol":"https","host":["api","getpostman","com"],"path":["workspaces","{{workspaceUid}}"]}},"response":[]}],"id":"e819a720-38cb-4157-922b-2283d492f7e9"},{"name":"Get Repo Resources","item":[{"name":"Get APIs from Repo","event":[{"listen":"prerequest","script":{"id":"5389911a-1976-4df1-94a8-c4e0684fcf7a","exec":[""],"type":"text/javascript"}},{"listen":"test","script":{"id":"3db0aaa3-1497-4196-99e4-d5a7b8cc146a","exec":["let res = pm.response.json();","pm.collectionVariables.set('targetApiSha', res.sha);","console.log(`API Sha is: ${res.sha}`);","","pm.collectionVariables.set('decodedApiContent', atob(res.content));","console.log(JSON.parse(atob(res.content)));","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});","","","","// const octokit = new Octokit({ auth: pm.environment.get('gh_pat') });","","// octokit.request('PUT /repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json', {","//   owner: 'lanigit',","//   repo: 'postman_ws_reset',","//   path: '/repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json',","//   message: 'my commit message',","//   committer: {","//     name: 'Michael Lanius',","//     email: 'michael.lanius+v10@postman.commit'","//   },","//   content: pm.globals.get('apiObjectArray')","// })","","// *** We can handle this using core Postman POST request ","// *** functionality with {{apiObjectArray}} (a global variable) as the payload in the body","","// const sendToRepo = {","//     url: 'https://webhook.site/2bcb543e-f59e-4817-91eb-deda4485071d',","//     method: 'POST',","//     header: {","//         'Content-Type': 'application/json',","//         'x-api-key': 'test_value'","//     },","//     body: {","//         mode: 'raw',","//         raw: pm.globals.get('apiObjectArray')","//     }","// }","// pm.sendRequest(sendToRepo, (error, response) => {","//     console.log(error ? error : response);","// });"],"type":"text/javascript"}}],"id":"76ddb449-af19-41d7-8bf0-dd33aa6347db","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{"content-type":true}},"request":{"method":"GET","header":[{"key":"Content-Type","value":"application/vnd.github.raw","type":"text"}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/apis/apiObjectArray.json?ref=dev","host":["{{ghRepoUrl}}"],"path":["contents","apis","apiObjectArray.json"],"query":[{"key":"ref","value":"dev"}]}},"response":[]},{"name":"Get Collections from Repo","event":[{"listen":"prerequest","script":{"id":"5389911a-1976-4df1-94a8-c4e0684fcf7a","exec":[""],"type":"text/javascript"}},{"listen":"test","script":{"id":"3db0aaa3-1497-4196-99e4-d5a7b8cc146a","exec":["let res = pm.response.json();","pm.collectionVariables.set('targetCollSha', res.sha);","console.log(`Collection Sha is: ${res.sha}`);","","pm.collectionVariables.set('decodedCollContent', atob(res.content));","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});","","// const octokit = new Octokit({ auth: pm.environment.get('gh_pat') });","","// octokit.request('PUT /repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json', {","//   owner: 'lanigit',","//   repo: 'postman_ws_reset',","//   path: '/repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json',","//   message: 'my commit message',","//   committer: {","//     name: 'Michael Lanius',","//     email: 'michael.lanius+v10@postman.commit'","//   },","//   content: pm.globals.get('apiObjectArray')","// })","","// *** We can handle this using core Postman POST request ","// *** functionality with {{apiObjectArray}} (a global variable) as the payload in the body","","// const sendToRepo = {","//     url: 'https://webhook.site/2bcb543e-f59e-4817-91eb-deda4485071d',","//     method: 'POST',","//     header: {","//         'Content-Type': 'application/json',","//         'x-api-key': 'test_value'","//     },","//     body: {","//         mode: 'raw',","//         raw: pm.globals.get('apiObjectArray')","//     }","// }","// pm.sendRequest(sendToRepo, (error, response) => {","//     console.log(error ? error : response);","// });"],"type":"text/javascript"}}],"id":"b7bf1af7-a028-4a8e-a4ed-138b89bd045b","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{"content-type":true}},"request":{"method":"GET","header":[{"key":"Content-Type","value":"application/vnd.github.raw","type":"text"}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/collections/collectionObjectArray.json?ref=dev","host":["{{ghRepoUrl}}"],"path":["contents","collections","collectionObjectArray.json"],"query":[{"key":"ref","value":"dev"}]}},"response":[]},{"name":"Get Environments from Repo","event":[{"listen":"prerequest","script":{"id":"5389911a-1976-4df1-94a8-c4e0684fcf7a","exec":[""],"type":"text/javascript"}},{"listen":"test","script":{"id":"3db0aaa3-1497-4196-99e4-d5a7b8cc146a","exec":["let res = pm.response.json();","pm.collectionVariables.set('targetEnvSha', res.sha);","console.log(`Environment Sha is: ${res.sha}`);","","pm.collectionVariables.set('decodedEnvContent', atob(res.content));","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});","","// const octokit = new Octokit({ auth: pm.environment.get('gh_pat') });","","// octokit.request('PUT /repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json', {","//   owner: 'lanigit',","//   repo: 'postman_ws_reset',","//   path: '/repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json',","//   message: 'my commit message',","//   committer: {","//     name: 'Michael Lanius',","//     email: 'michael.lanius+v10@postman.commit'","//   },","//   content: pm.globals.get('apiObjectArray')","// })","","// *** We can handle this using core Postman POST request ","// *** functionality with {{apiObjectArray}} (a global variable) as the payload in the body","","// const sendToRepo = {","//     url: 'https://webhook.site/2bcb543e-f59e-4817-91eb-deda4485071d',","//     method: 'POST',","//     header: {","//         'Content-Type': 'application/json',","//         'x-api-key': 'test_value'","//     },","//     body: {","//         mode: 'raw',","//         raw: pm.globals.get('apiObjectArray')","//     }","// }","// pm.sendRequest(sendToRepo, (error, response) => {","//     console.log(error ? error : response);","// });"],"type":"text/javascript"}}],"id":"adebb869-b621-4e89-bcf1-fab72da18dc5","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{"content-type":true}},"request":{"method":"GET","header":[{"key":"Content-Type","value":"application/vnd.github.raw","type":"text"}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/environments/environmentObjectArray.json?ref=dev","host":["{{ghRepoUrl}}"],"path":["contents","environments","environmentObjectArray.json"],"query":[{"key":"ref","value":"dev"}]}},"response":[]},{"name":"Get Mocks from Repo","event":[{"listen":"prerequest","script":{"id":"5389911a-1976-4df1-94a8-c4e0684fcf7a","exec":[""],"type":"text/javascript"}},{"listen":"test","script":{"id":"3db0aaa3-1497-4196-99e4-d5a7b8cc146a","exec":["let res = pm.response.json();","pm.collectionVariables.set('targetMockSha', res.sha);","console.log(`Mock Sha is: ${res.sha}`);","","pm.collectionVariables.set('decodedMockContent', atob(res.content));","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});","","// const octokit = new Octokit({ auth: pm.environment.get('gh_pat') });","","// octokit.request('PUT /repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json', {","//   owner: 'lanigit',","//   repo: 'postman_ws_reset',","//   path: '/repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json',","//   message: 'my commit message',","//   committer: {","//     name: 'Michael Lanius',","//     email: 'michael.lanius+v10@postman.commit'","//   },","//   content: pm.globals.get('apiObjectArray')","// })","","// *** We can handle this using core Postman POST request ","// *** functionality with {{apiObjectArray}} (a global variable) as the payload in the body","","// const sendToRepo = {","//     url: 'https://webhook.site/2bcb543e-f59e-4817-91eb-deda4485071d',","//     method: 'POST',","//     header: {","//         'Content-Type': 'application/json',","//         'x-api-key': 'test_value'","//     },","//     body: {","//         mode: 'raw',","//         raw: pm.globals.get('apiObjectArray')","//     }","// }","// pm.sendRequest(sendToRepo, (error, response) => {","//     console.log(error ? error : response);","// });"],"type":"text/javascript"}}],"id":"8594044b-43e9-4906-b234-d2500f5201f0","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{"content-type":true}},"request":{"method":"GET","header":[{"key":"Content-Type","value":"application/vnd.github.raw","type":"text"}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/mocks/mockObjectArray.json?ref=dev","host":["{{ghRepoUrl}}"],"path":["contents","mocks","mockObjectArray.json"],"query":[{"key":"ref","value":"dev"}]}},"response":[]},{"name":"Get Monitors from Repo","event":[{"listen":"prerequest","script":{"id":"5389911a-1976-4df1-94a8-c4e0684fcf7a","exec":[""],"type":"text/javascript"}},{"listen":"test","script":{"id":"3db0aaa3-1497-4196-99e4-d5a7b8cc146a","exec":["let res = pm.response.json();","pm.collectionVariables.set('targetMonSha', res.sha);","console.log(`Monitor Sha is: ${res.sha}`);","","pm.collectionVariables.set('decodedMonContent', atob(res.content));","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});","","// const octokit = new Octokit({ auth: pm.environment.get('gh_pat') });","","// octokit.request('PUT /repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json', {","//   owner: 'lanigit',","//   repo: 'postman_ws_reset',","//   path: '/repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json',","//   message: 'my commit message',","//   committer: {","//     name: 'Michael Lanius',","//     email: 'michael.lanius+v10@postman.commit'","//   },","//   content: pm.globals.get('apiObjectArray')","// })","","// *** We can handle this using core Postman POST request ","// *** functionality with {{apiObjectArray}} (a global variable) as the payload in the body","","// const sendToRepo = {","//     url: 'https://webhook.site/2bcb543e-f59e-4817-91eb-deda4485071d',","//     method: 'POST',","//     header: {","//         'Content-Type': 'application/json',","//         'x-api-key': 'test_value'","//     },","//     body: {","//         mode: 'raw',","//         raw: pm.globals.get('apiObjectArray')","//     }","// }","// pm.sendRequest(sendToRepo, (error, response) => {","//     console.log(error ? error : response);","// });"],"type":"text/javascript"}}],"id":"97d5037f-e35e-4c6c-b0e1-7607ee697eda","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{"content-type":true}},"request":{"method":"GET","header":[{"key":"Content-Type","value":"application/vnd.github.raw","type":"text"}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/monitors/monitorObjectArray.json?ref=dev","host":["{{ghRepoUrl}}"],"path":["contents","monitors","monitorObjectArray.json"],"query":[{"key":"ref","value":"dev"}]}},"response":[]}],"id":"14c20658-57aa-471f-a4e6-2fd4f96a5fdd"},{"name":"Format Data & Send to Repo","item":[{"name":"Send APIs to Repo","event":[{"listen":"prerequest","script":{"id":"5389911a-1976-4df1-94a8-c4e0684fcf7a","exec":["let parsedApiArray = JSON.parse(pm.collectionVariables.get('apiArray'));","let apiObjectArray = [];","","for(let api in parsedApiArray){","    // console.log(parsedApiArray[api])","    const apiRequest = {","        url: 'https://api.getpostman.com/apis/' + parsedApiArray[api],","        method: 'GET',","        header: {","            'Content-Type': 'application/json',","            'x-api-key': pm.environment.get('reset_key')","        }","    }","    pm.sendRequest(apiRequest, (error, response) => {","        // console.log(error ? error : response.json());","        if(error){","            console.log(`Something went wrong w/ APIs:\\n ${error}`);","        } else {","            apiObjectArray.push(response.json());","        }","        pm.globals.set('apiObjectArray', btoa(JSON.stringify(apiObjectArray))); ","    });","}",""],"type":"text/javascript"}},{"listen":"test","script":{"id":"3db0aaa3-1497-4196-99e4-d5a7b8cc146a","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});","","// const octokit = new Octokit({ auth: pm.environment.get('gh_pat') });","","// octokit.request('PUT /repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json', {","//   owner: 'lanigit',","//   repo: 'postman_ws_reset',","//   path: '/repos/lanigit/postman_ws_reset/contents/apis/apiObjectArray.json',","//   message: 'my commit message',","//   committer: {","//     name: 'Michael Lanius',","//     email: 'michael.lanius+v10@postman.commit'","//   },","//   content: pm.globals.get('apiObjectArray')","// })","","// *** We can handle this using core Postman POST request ","// *** functionality with {{apiObjectArray}} (a global variable) as the payload in the body","","// const sendToRepo = {","//     url: 'https://webhook.site/2bcb543e-f59e-4817-91eb-deda4485071d',","//     method: 'POST',","//     header: {","//         'Content-Type': 'application/json',","//         'x-api-key': 'test_value'","//     },","//     body: {","//         mode: 'raw',","//         raw: pm.globals.get('apiObjectArray')","//     }","// }","// pm.sendRequest(sendToRepo, (error, response) => {","//     console.log(error ? error : response);","// });"],"type":"text/javascript"}}],"id":"306dc969-25aa-4109-91bb-f37459ad6ddc","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{"content-type":true}},"request":{"method":"PUT","header":[{"key":"Content-Type","value":"application/vnd.github.raw","type":"text","disabled":true}],"body":{"mode":"raw","raw":"{\n  \"owner\": \"lanigit\",\n  \"repo\": \"postman_ws_reset\",\n  \"path\": \"apis/apiObjectArray.json\",\n  \"message\": \"New commit to APIs at: {{currTime}}\",\n  \"branch\": \"dev\",\n  \"committer\": {\n    \"name\": \"Michael Lanius\",\n    \"email\": \"michael.lanius@postman.com\",\n    \"date\": \"{{currTime}}\"\n  },\n  \"content\": \"{{apiObjectArray}}\",\n  \"sha\": \"{{targetApiSha}}\"\n}\n","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/apis/apiObjectArray.json","host":["{{ghRepoUrl}}"],"path":["contents","apis","apiObjectArray.json"]}},"response":[]},{"name":"Send Collections to Repo","event":[{"listen":"prerequest","script":{"id":"40c9953f-ab90-460e-a38e-4519f0ed2854","exec":["let parsedCollectionArray = JSON.parse(pm.collectionVariables.get('collectionArray'));","let collectionObjectArray = [];","","for(collection in parsedCollectionArray){","    // console.log(parsedCollectionArray[collection])","    const collectionRequest = {","        url: 'https://api.getpostman.com/collections/' + parsedCollectionArray[collection],","        method: 'GET',","        header: {","            'Content-Type': 'application/json',","            'x-api-key': pm.environment.get('reset_key')","        }","    }","    pm.sendRequest(collectionRequest, (error, response) => {","        // console.log(error ? error : response.json());","        if(error){","            console.log(`Something went wrong w/Collections:\\n ${error}`);","        } else {","            collectionObjectArray.push(response.json());","        }","        pm.globals.set('collectionObjectArray', btoa(JSON.stringify(collectionObjectArray)));","    })","}"],"type":"text/javascript"}},{"listen":"test","script":{"id":"0506e142-c80a-4555-8b2e-12dde223ca04","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});",""],"type":"text/javascript"}}],"id":"105f2560-10de-4837-8212-13fa01984357","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\n  \"owner\": \"lanigit\",\n  \"repo\": \"postman_ws_reset\",\n  \"path\": \"collections/collectionObjectArray.json\",\n  \"message\": \"New commit to Collections at: {{currTime}}\",\n  \"branch\": \"dev\",\n  \"committer\": {\n    \"name\": \"Michael Lanius\",\n    \"email\": \"michael.lanius@postman.com\",\n    \"date\": \"{{currTime}}\"\n  },\n  \"content\": \"{{collectionObjectArray}}\",\n  \"sha\": \"{{targetCollSha}}\"\n}\n","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/collections/collectionObjectArray.json","host":["{{ghRepoUrl}}"],"path":["contents","collections","collectionObjectArray.json"]}},"response":[]},{"name":"Send Environments to Repo","event":[{"listen":"prerequest","script":{"id":"7ab5a769-b588-439b-95ed-3eabb391a123","exec":["let parsedEnvironmentArray = JSON.parse(pm.collectionVariables.get('environmentArray'));","let environmentObjectArray = [];","","for(environment in parsedEnvironmentArray){","    // console.log(parsedEnvironmemtArray[environment]);","    const environmentRequest = {","        url: 'https://api.getpostman.com/environments/' + parsedEnvironmentArray[environment],","        method: 'GET',","        header: {","            'Content-Type': 'application/json',","            'x-api-key': pm.environment.get('reset_key')","        }","    };","    pm.sendRequest(environmentRequest, (error, response) => {","        // console.log(error ? error : response.json());","        if(error){","            console.log(`Something went wrong w/Environments:\\n ${error}`);","        } else {","            environmentObjectArray.push(response.json());","        }","        pm.globals.set('environmentObjectArray', btoa(JSON.stringify(environmentObjectArray)));","    })","}"],"type":"text/javascript"}},{"listen":"test","script":{"id":"89f2bd9b-0d11-435f-9421-ce9744c4e07c","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});"],"type":"text/javascript"}}],"id":"a89fc3e5-8ef1-4e54-8aba-e1db7cfd92b3","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\n  \"owner\": \"lanigit\",\n  \"repo\": \"postman_ws_reset\",\n  \"path\": \"environments/environmentObjectArray.json\",\n  \"message\": \"New commit to Environments at: {{currTime}}\",\n  \"branch\": \"dev\",\n  \"committer\": {\n    \"name\": \"Michael Lanius\",\n    \"email\": \"michael.lanius@postman.com\",\n    \"date\": \"{{currTime}}\"\n  },\n  \"content\": \"{{environmentObjectArray}}\",\n  \"sha\": \"{{targetEnvSha}}\"\n}\n","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/environments/environmentObjectArray.json","host":["{{ghRepoUrl}}"],"path":["contents","environments","environmentObjectArray.json"]}},"response":[]},{"name":"Send Mocks to Repo","event":[{"listen":"prerequest","script":{"id":"cf26cbb8-0214-4f80-94c5-56c18d6dfdbc","exec":["let parsedMockArray = JSON.parse(pm.collectionVariables.get('mockArray'));","let mockObjectArray = [];","","for(mock in parsedMockArray){","    // console.log(parsedMockArray[mock]);","    const mockRequest = {","        url: \"https://api.getpostman.com/mocks/\" + parsedMockArray[mock],","        method: \"GET\",","        header: {","            'Content-Type': 'application/json',","            'x-api-key': pm.environment.get('reset_key')","        }","    };","    pm.sendRequest(mockRequest, (error, response) => {","        if(error){","            console.log(`Something went wrongb w/ Mocks:\\n ${error}`);","        } else {","            mockObjectArray.push(response.json());","        }","        pm.globals.set('mockObjectArray', btoa(JSON.stringify(mockObjectArray)));","    });","}"],"type":"text/javascript"}},{"listen":"test","script":{"id":"c389bd9b-acd5-4dd4-9f20-5995dad3cc75","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});"],"type":"text/javascript"}}],"id":"cfd87d15-01aa-4a20-8ba9-0759c9e9ece7","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\n  \"owner\": \"lanigit\",\n  \"repo\": \"postman_ws_reset\",\n  \"path\": \"mocks/mockObjectArray.json\",\n  \"message\": \"New commit to Mocks at: {{currTime}}\",\n  \"branch\": \"dev\",\n  \"committer\": {\n    \"name\": \"Michael Lanius\",\n    \"email\": \"michael.lanius@postman.com\",\n    \"date\": \"{{currTime}}\"\n  },\n  \"content\": \"{{mockObjectArray}}\",\n  \"sha\": \"{{targetMockSha}}\"\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/mocks/mockObjectArray.json","host":["{{ghRepoUrl}}"],"path":["contents","mocks","mockObjectArray.json"]}},"response":[]},{"name":"Send Monitors to Repo","event":[{"listen":"prerequest","script":{"id":"5566d2a5-3281-4a17-96b0-29e5290b7303","exec":["let parsedMonitorArray = JSON.parse(pm.collectionVariables.get('monitorArray'));","let monitorObjectArray = [];","","for(monitor in parsedMonitorArray){","    // console.log(monitorArray[monitor]);","    const monitorRequest = {","        url: \"https://api.getpostman.com/monitors/\" + parsedMonitorArray[monitor],","        method: \"GET\",","        header: {","            \"Content-Type\": \"application/json\",","            \"x-api-key\": pm.environment.get('reset_key')","        }","    }","    pm.sendRequest(monitorRequest, (error, response) => {","        if(error){","            console.log(`Something went wrong w/Monitors:\\n ${error}`);","        } else {","            monitorObjectArray.push(response.json());","        }","        pm.globals.set('monitorObjectArray', btoa(JSON.stringify(monitorObjectArray)));","    })","}"],"type":"text/javascript"}},{"listen":"test","script":{"id":"b54dfa6b-d587-4ecd-9748-831f383e7bd7","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});"],"type":"text/javascript"}}],"id":"221516dd-0d15-46d6-a045-a480472192c6","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\n  \"owner\": \"lanigit\",\n  \"repo\": \"postman_ws_reset\",\n  \"path\": \"monitors/monitorObjectArray.json\",\n  \"message\": \"New commit to Monitors at: {{currTime}}\",\n  \"branch\": \"dev\",\n  \"committer\": {\n    \"name\": \"Michael Lanius\",\n    \"email\": \"michael.lanius@postman.com\",\n    \"date\": \"{{currTime}}\"\n  },\n  \"content\": \"{{monitorObjectArray}}\",\n  \"sha\": \"{{targetMonSha}}\"\n}\n","options":{"raw":{"language":"json"}}},"url":{"raw":"{{ghRepoUrl}}/contents/monitors/monitorObjectArray.json","host":["{{ghRepoUrl}}"],"path":["contents","monitors","monitorObjectArray.json"]}},"response":[]}],"id":"36c3db83-455a-4e25-a9a9-8b315585f920","event":[{"listen":"prerequest","script":{"id":"a91000a0-d327-4910-a14a-ddc1b2af015f","type":"text/javascript","exec":[""]}},{"listen":"test","script":{"id":"ad0bada2-1fcf-494c-b3c9-22e8088757bf","type":"text/javascript","exec":[""]}}]},{"name":"Run Diff on Resources","item":[{"name":"Get Local Workspace Data","event":[{"listen":"test","script":{"id":"684a7ffb-2a6d-4b0a-b57f-b00dad906ed2","exec":["const { workspace } = pm.response.json();","const { apis, collections, environments, mocks, monitors } = workspace;","","// ++++++++++++++++++++++ //","// Prepare local Postman data for comparison","","// let localApisObject = JSON.stringify(Object.assign({}, apis));","// // console.log(localApisObject);","// let localCollectionsObject = JSON.stringify(Object.assign({}, collections));","// // console.log(localCollectionsObject);","// let localEnvironmentsObject = JSON.stringify(Object.assign({}, environments));","// // console.log(localEnvironmentsObject);","// let localMocksObject = JSON.stringify(Object.assign({}, mocks));","// // console.log(localMocksObject);","// let localMonitorsObject = JSON.stringify(Object.assign({}, monitors));","// // console.log(localMonitorsObject);","","// ++++++++++++++++++++++ //","","// SET API ARRAY ","let localApiArray = [];","apis.forEach(el => {","    localApiArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('localApiArray', JSON.stringify(localApiArray));","console.log(\"Local API UIDs: \" + pm.collectionVariables.get('apiArray'));","","// SET COLLECTIONS ARRAY","let targetCollArray = [];","collections.forEach(el => {","    targetCollArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('targetCollArray', JSON.stringify(targetCollArray));","// console.log(\"Collections UIDs: \" + pm.collectionVariables.get('collectionArray'));","","// SET ENVIRONMENTS ARRAY","let targetEnvArray = [];","environments.forEach(el => {","    targetEnvArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('targetEnvArray', JSON.stringify(targetEnvArray));","// console.log(\"Environment UIDs: \" + pm.collectionVariables.get('environmentArray'));","","// SET MOCK ARRAY","let targetMockArray = [];","mocks.forEach(el => {","    targetMockArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('targetMockArray', JSON.stringify(targetMockArray));","// console.log(\"Mock UIDs: \" + pm.collectionVariables.get('mockArray'));","","// SET MONITOR ARRAY","let targetMonArray = [];","monitors.forEach(el => {","    targetMonArray.push(el[\"uid\"]);","});","","pm.collectionVariables.set('targetMonArray', JSON.stringify(targetMonArray));","// console.log(\"Monitor UIDs: \" + pm.collectionVariables.get('monitorArray'));","","pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","pm.test(\"200 'OK' check\", function () {","    pm.response.to.have.status(\"OK\");","});",""],"type":"text/javascript"}}],"id":"2df19e90-288f-47cc-8697-eba7b9988358","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"apikey","apikey":[{"key":"value","value":"{{reset_key}}","type":"string"},{"key":"key","value":"x-api-key","type":"string"}]},"method":"GET","header":[{"key":"Access-Control-Allow-Origin","value":"https://api.getpostman.com","type":"text"}],"url":{"raw":"https://api.getpostman.com/workspaces/{{workspaceUid}}","protocol":"https","host":["api","getpostman","com"],"path":["workspaces","{{workspaceUid}}"]}},"response":[]}],"id":"79ed3d46-8d7d-415f-8eaa-6f1ebe72154e"},{"name":"Reset Workspace Data","item":[],"id":"c4df58ef-6bc7-4c6a-825b-067dc0b20242"},{"name":"GitHub General","item":[{"name":"Get All GitHub Repos","id":"5b8749fb-a1d0-46ba-b8f4-473bbd405306","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"https://api.github.com/users/lanigit/repos","protocol":"https","host":["api","github","com"],"path":["users","lanigit","repos"]}},"response":[]},{"name":"Get Reset Tool Repo","id":"d60bddd9-231e-490c-ad67-a78eb655f8bb","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"{{ghRepoUrl}}","host":["{{ghRepoUrl}}"]}},"response":[]}],"id":"e86cb355-c266-4d14-b534-e464cd1199a7"}],"auth":{"type":"oauth2","oauth2":[{"key":"accessTokenUrl","value":"https://github.com/login/oauth/access_token","type":"string"},{"key":"scope","value":"repo workflow","type":"string"},{"key":"clientSecret","value":"{{ghClientSecret}}","type":"string"},{"key":"clientId","value":"{{ghClientId}}","type":"string"},{"key":"authUrl","value":"https://github.com/login/oauth/authorize","type":"string"},{"key":"tokenName","value":"Reset Tool Token","type":"string"},{"key":"addTokenTo","value":"header","type":"string"}]},"event":[{"listen":"prerequest","script":{"id":"35234451-ba86-4e0a-a5f9-0c8a1f051dc7","type":"text/javascript","exec":["let moment = require('moment');","let currTime = moment().format('MMMM Do YYYY, h:mm:ss a') + \" \" + \"(\"+ moment.locale() + \")\";","pm.collectionVariables.set('currTime', currTime);"]}},{"listen":"test","script":{"id":"719f1ca0-89f8-4c6e-80a1-0c7afaf3794f","type":"text/javascript","exec":[""]}}],"variable":[{"id":"a3eb7928-709e-42d1-ad2a-75aed9d70fde","key":"currTime","value":""},{"id":"ba4cbce8-c93b-4cf6-992b-03acbec55f29","key":"apiArray","value":""},{"id":"2ddd2f1b-debd-4a49-9f66-225785f5db3f","key":"collectionArray","value":""},{"id":"664927ba-ce12-4efc-9a15-375fe8b2dfdb","key":"environmentArray","value":""},{"id":"1128bf73-0192-47a2-87a4-c8f5073086cd","key":"mockArray","value":""},{"id":"f52e4c7d-c05b-4229-8b72-bea88237854a","key":"monitorArray","value":""},{"id":"e36e6585-ec8c-48d4-84e4-12aaf7c74a62","key":"targetApiSha","value":""},{"id":"9d7a6498-4def-4fb4-9a06-d218396377f3","key":"targetCollSha","value":""},{"id":"046f05a5-e97b-4de6-a263-cb4808fbe87e","key":"targetEnvSha","value":""},{"id":"2c3b1874-8c7a-498a-ab89-93f6322c2d4a","key":"targetMockSha","value":""},{"id":"01d385c2-fa0d-43f8-9220-5efec29eefd3","key":"targetMonSha","value":""},{"id":"4ae4af74-d14f-4f10-83e4-4049bfde265e","key":"decodedApiContent","value":""},{"id":"595cd548-e68d-44d3-b1ed-2c7929a9215e","key":"decodedCollContent","value":""},{"id":"d93ca45b-d3bb-4fce-8eca-ea3d54345db3","key":"decodedEnvContent","value":""},{"id":"c5ed060c-5bf7-495b-9b7d-fb3e2a1acf48","key":"decodedMockContent","value":""},{"id":"cb6bacd7-607b-4522-b083-aae4407e6e3b","key":"decodedMonContent","value":""},{"id":"ab19af32-0663-4a74-8856-1be10a2c5408","key":"targetApiArray","value":""},{"id":"7d0b112a-48c9-4346-b269-8668c5eca4fc","key":"targetCollArray","value":""},{"id":"a21306de-d084-40ce-849f-e004773bec82","key":"targetEnvArray","value":""},{"id":"3c4f6642-3333-49dc-b09f-f9a36742a8f8","key":"targetMockArray","value":""},{"id":"10f04ea8-4b80-4ede-a975-c7bbbf5ffd79","key":"targetMonArray","value":""},{"id":"77bcc851-4732-4b81-a9be-153cb05683dc","key":"localApiArray","value":""}]}}]